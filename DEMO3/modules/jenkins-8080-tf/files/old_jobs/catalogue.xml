<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.36">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.4.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.4.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Build and run catalogue docker container</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.75">
    <script>#!groovy
pipeline{
    agent any
       
       stages {
        stage(&apos;Checkout&apos;) {
            steps {
                git url: &apos;https://github.com/ryzhan/catalogue.git&apos;
            }
        }   
        
        stage(&apos;Build catalogue&apos;) {
            steps {
                
                sh &apos;docker login -u _json_key -p &quot;$(cat /var/lib/jenkins/credential/if-101-demo1-02c2a2eae285.json)&quot; https://gcr.io&apos;
                sh &quot;docker build -t gcr.io/if-101-demo1/catalogue:3.0.0-$BUILD_NUMBER -t gcr.io/if-101-demo1/catalogue:latest .&quot;
                sh &quot;docker push gcr.io/if-101-demo1/catalogue&quot;
                sh &quot;docker rmi -f gcr.io/if-101-demo1/catalogue:latest gcr.io/if-101-demo1/catalogue:3.0.0-$BUILD_NUMBER&quot;
               
 
                
            }
            
        }
           
        stage(&apos;Archive workspace&apos;) {
                steps {
                    archiveArtifacts artifacts: &apos;**/*&apos;, fingerprint: true
                }
        }
        
        stage(&apos;Approve for Deploy&apos;) {
        
                steps {
                    timeout(time:5, unit:&apos;DAYS&apos;) {
                        input message:&apos;Approve deployment?&apos;
                    }

                }
        }   
           
        stage(&apos;Run catalogue&apos;) {
            
            environment {
                DB_HOST = sh(script: &quot;getent hosts db-server | cut -d&apos; &apos; -f1&quot;, , returnStdout: true).trim()
            }
            
            //environment {             
            //        DB_NETWORK_IP = sh(script: &quot;getent hosts app-server | cut -d&apos; &apos; -f1&quot;, , returnStdout: true).trim()                  
            //        DOCKER_HOST=&quot;ssh://jenkins@app-server&quot;        
            //}
            steps {
                
                sh &quot;git clone https://github.com/ryzhan/ConfDemo3.git&quot;
                //sh &quot;docker run&quot;
                dir(&apos;./ConfDemo3/ansible&apos;){
                    sh &apos;ansible-playbook build_microservices.yml --tags &quot;catalogue-run&quot; --extra-var &quot;db_host=$DB_HOST&quot;&apos;
                }
                
            }
            
        }
        
       
 
    }
    
    post {
        always {
            echo &apos;I have finished&apos;
            echo &apos;And cleaned workspace&apos;
            deleteDir()
        }
        success {
            echo &apos;Job succeeeded!&apos;
        }
        unstable {
            echo &apos;I am unstable :/&apos;
        }
        failure {
            echo &apos;I failed :(&apos;
        }
        changed {
            echo &apos;Things were different before...&apos;
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>